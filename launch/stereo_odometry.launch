<launch>

    <!--
        The purpose of this launch file is conversion of raw stereo into stereo odometry, consumed by the EKF and rtab map.
        There are three stages to this conversion:
            (1) decompress the raw stereo images
            (2) rectify the unrectified (fisheye) images
            (3) convert the rectified images to odometry

        Note: YOU DO NOT NEED TO LAUNCH THIS FILE DIRECTLY, it will be launched by "autonomous_mapping.launch".

        Note: the stereo_odometry node requires transforms between base_link and the stereo camera frames. These are published
        by "robot_state.launch" (which is automatically run when you launch this file).
    -->

    <!-- call robot_state.launch to publish base_link -> stereo camera transforms -->
    <include file="$(find core_rover)/launch/robot_state.launch"/>

    <!--
        (1) DECOMPRESS STEREO IMAGES 
        Removed decompression node - the stereo camera publishes raw (uncompressed) images already
    -->
    <!--
    <group ns="/elp">
        <node name="republish_left" type="republish" pkg="image_transport" args="compressed in:=/elp/left/image_raw raw out:=/elp/left/image_raw" />
        <node name="republish_right" type="republish" pkg="image_transport" args="compressed in:=/elp/right/image_raw raw out:=/elp/right/image_raw" />
    </group>
    -->

    <!-- (2) RECTIFY STEREO IMAGES -->
    <group ns="/elp">
        <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" output="screen">
            <param name="approx_sync" value="true"/>

            <!-- SUBSCRIBE to: left/right decompressed stereo images, left/right camera info -->
            <remap from="left/image_raw"    to="/elp/left/image_raw"/>
            <remap from="left/camera_info"  to="/elp/left/camera_info"/>
            <remap from="right/image_raw"   to="/elp/right/image_raw"/>
            <remap from="right/camera_info" to="/elp/right/camera_info"/>

            <!-- PUBLISH to: left/rigwht rectified stereo -->

            <param name="disparity_range" value="128"/>
        </node>
    </group>

    <!-- (3) CONVERT TO ODOMETRY -->
    <node pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen">
        <param name="approx_sync" value="true"/>

        <!-- SUBSCRIBE to: left/right rectified image, left/right camera info -->
        <remap from="left/image_rect"       to="/elp/left/image_rect"/>
        <remap from="right/image_rect"      to="/elp/right/image_rect"/>
        <remap from="left/camera_info"      to="/elp/left/camera_info"/>
        <remap from="right/camera_info"     to="/elp/right/camera_info"/>

        <!-- PUBLISH to: stereo odometry -->
        <remap from="odom"                  to="/stereo_odometry"/>

        <!--note, for stereo_odometry to publish, we require the transform hierarchy from:
                base_link->|left_cam_frame|
                base_link->|right_cam_frame
            this tree is currently published by robot_state.launch
        -->
        <param name="frame_id" type="string" value="base_link"/>
        <param name="odom_frame_id" type="string" value="odom"/>

        <!-- DO NOT PUBBLISH: odom->base_link transform - this should be "false" only if
             running with "autonomous_localiation.launch"
        -->
        <param name="publish_tf" type="bool" value="false"/>

        <!-- other parameters -->
        <param name="wait_for_transform" value="true"/>

        <param name="Vis/InlierDistance" type="string" value="0.1"/>
        <param name="Vis/MinInliers" type="string" value="10"/>
        <param name="Vis/RoiRatios" type="string" value="0.03 0.03 0.04 0.04"/>
        <param name="Vis/MaxDepth" type="string" value="10"/>

        <param name="Vis/MaxFeatures" type="string" value="500"/>
        <param name="GFTT/MinDistance" type="string" value="5"/>
        <param name="GFTT/QualityLevel"  type="string" value="0.00001"/>

        <param name="Odom/Strategy"      type="string" value="0"/> <!-- 0=Frame-to-Map, 1=Frame=to=Frame -->

        <param name="Vis/EstimationType" type="string" value="1"/> <!-- 0=3D->3D 1=3D->2D (PnP) -->
        <param name="Odom/GuessMotion" type="string" value="true"/>
        <!-- param unless="$(arg local_bundle)" name="OdomF2M/BundleAdjustment" type="string" value="0"/ -->
        <param name="OdomF2M/MaxSize"    type="string" value="1000"/>
    </node>

</launch>
